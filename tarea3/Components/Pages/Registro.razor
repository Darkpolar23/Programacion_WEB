@page "/registro"
@inject NavigationManager NavMan
@rendermode InteractiveServer
@inject IJSRuntime JSx
@using System.Text.Json

<h3>Registros recibidos</h3>
<div class="text-end mb-3">
    <button class="btn btn-primary" @onclick="NuevoRegistro">Nuevo registro</button>
</div>

<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>Fecha</th>
            <th>Descripción</th>
            <th>Costo Estimado</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var registro in registros)
        {
            <tr>

                <td>@registro.Fecha</td>
                <td>
                    @((registro.Descripcion.Length > 50) ? @registro.Descripcion.Substring(0, 50) + "..." : @registro.Descripcion)
                </td>
                <td><LabelDinero Valor="registro.CostoEstimado"/></td>

                <td>
                    <button @onclick="() => editarFila(registro)" class="btn btn-primary btn-sm">Editar</button>
                    <button @onclick="() => eliminarFila(registro)" class="btn btn-danger btn-sm">Eliminar</button>
                    <button @onclick="() => imprimirX(registro)" class="btn btn-success btn-sm">Imprimir</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {

    List<Reporte> registros = new List<Reporte>();

    private void NuevoRegistro()
    {
        NavMan.NavigateTo("registro/nuevo");
    }

    private void editarFila(Reporte registro)
    {
        NavMan.NavigateTo("registro/editar/" + registro.Id);
    }

    private void imprimirX(Reporte registro)
    {

        JSx.InvokeVoidAsync("window.open", "registro/imprimir/" + registro.Id, "_blank");
        //NavMan.NavigateTo("registro/imprimir/" + registro.Id, true);
    }

    private async Task eliminarFila(Reporte registro)
    {
        var rs = await JSx.InvokeAsync<bool>("confirm", "¿Está seguro de eliminar el registro?");
        if (rs)
        {
            registros.Remove(registro);
            await JSx.InvokeVoidAsync("localStorage.setItem", "registros", JsonSerializer.Serialize(registros));
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            var registrosJson = await JSx.InvokeAsync<string>("localStorage.getItem", "registros");

            if (registrosJson != null)
            {
                registros = JsonSerializer.Deserialize<List<Reporte>>(registrosJson);
                //JSx.InvokeVoidAsync("alert", registros.Count + "registros cargados");
                StateHasChanged();
            }

        }
    }
}